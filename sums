#!/usr/bin/env bash
#--------------------------------------------------------------------
function debug_msg
{
    if [[ $debugging != 0 ]]; then
        echo $* >&2
    fi
}

function debug_line
{
    debug_msg ----------
}

#--------------------------------------------------------------------
function print_help
{
    command=$(basename $0)
    cat >&2 <<EOF
syntax: $command [-dhp] [-n num-terms] [-s max-sum] [-t max-term]

        -d  enables debugging messages (should be first if used)
        -h  displays this help
        -n  specifies the number of terms          (default=2)
        -p  pause before displaying answer
        -s  specifies the maximum sum  (inclusive) (default=10)
        -t  specifies the maximum term (inclusive) (default=10)

EOF
}


#--------------------------------------------------------------------
# MAIN
#--------------------------------------------------------------------

# Globals
debugging=0
max_sum=10
max_term=10
num_terms=2
pause_before_answer=0

if [[ $# == 0 ]]; then
    print_help
    exit 0
fi

# parse command-line options
while getopts "hpdt:n:s:" option; do
    case $option in
        d)
            debugging=1
            debug_msg \$debugging=$debugging
            ;;
        h)
            print_help
            exit 0
            ;;
        p)
            pause_before_answer=1
            debug_msg \$pause_before_answer=$pause_before_answer
            ;;
        t)
            max_term=$OPTARG
            debug_msg \$max_term=$max_term
            ;;
        s)
            max_sum=$OPTARG
            debug_msg \$max_sum=$max_sum
            ;;
        n)
            num_terms=$OPTARG
            debug_msg \$num_terms=$num_terms
            ;;
    esac
done

#--------------------------------------------------------------------

TMPFILE=$(mktemp)
declare -i we_have_printed_a_result=0
declare -i iterations=0

until (( $we_have_printed_a_result )); do

    debug_line
    iterations=$((iterations+1))
    truncate -s 0 $TMPFILE

    # accumulator
    declare -i accum=0
    declare -i i

    for (( i=1; i <= $num_terms; i++ )); do
        declare -i this_term=$(( RANDOM % (max_term+1) ))
        debug_msg \$this_term=$this_term

        echo $this_term >> $TMPFILE
        accum=$(( accum + $this_term ))
    done

    debug_msg \$accum=$accum

    if ! (( $pause_before_answer )); then
        echo $accum >> $TMPFILE
    fi

    if (( $accum <= $max_sum )); then
        debug_line
        cat $TMPFILE
        we_have_printed_a_result=1

        if (( $pause_before_answer )); then
            read -p "press enter for answer: "
            echo $accum
        fi
    fi
done

rm -f $TMPFILE
debug_msg \$iterations=$iterations

#--------------------------------------------------------------------
# vim: sw=4 ts=4 et
